{"version":3,"sources":["serviceWorker.ts","services/SyncStorage.ts","graphql/client/cache.ts","apollo/client.ts","generated/graphql.tsx","pages/auth/AuthPage.tsx","hooks/use-query-params.ts","components/protected-route/ProtectedRoute.tsx","components/user-header/UserHeader.tsx","components/layout/Layout.tsx","components/task-tag/TaskTag.tsx","components/countdown-alert/CountDownAlert.tsx","components/share-task-tag/ShareTaskTag.tsx","components/tasks-events-timeline/TasksEventsTimeline.tsx","components/task-modal/TaskModal.tsx","components/task-card/TaskCard.tsx","graphql/server/queries.ts","components/add-task-modal/AddTaskModal.tsx","components/add-task-card/AddTaskCard.tsx","components/tasks/Tasks.tsx","pages/dashboard/DashboardPage.tsx","components/protected-route/LoggedOutOnlyRoute.tsx","pages/shared-tasks/SharedTasksPage.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","SyncStorage","token","localStorage","setItem","getItem","getToken","authorization","removeItem","gql","LOGOUT","SessionMutations","setSession","_","access_token","cache","writeData","data","session","saveToken","logout","a","deleteToken","client","resetStore","InMemoryCache","httpLink","createHttpLink","uri","authLink","setContext","headers","getAuthHeader","errorLink","onError","networkError","graphQLErrors","response","operation","getContext","unauthorized","find","error","extensions","exception","statusCode","status","mutate","mutation","catch","ApolloClient","link","ApolloLink","from","resolvers","Mutation","onResetStore","TaskStatus","GetSessionDocument","useGetSessionQuery","baseOptions","ApolloReactHooks","SetSessionDocument","LogoutDocument","LoginDocument","SignupDocument","ChangeTaskStatusDocument","UpdateTaskDetailsDocument","CreateTaskDocument","ShareTaskDocument","MeDocument","useMeQuery","GetTasksDocument","GetProfilesDocument","GetSharedTasksDocument","GetTaskEventsDocument","Content","AntdLayout","tabList","key","tab","AuthPage","history","useHistory","loginMutation","loginError","useSignupMutation","signupMutation","signupError","useSetSessionMutation","setSessionMutation","useLocation","query","URLSearchParams","search","defaultValue","get","value","set","push","pathname","toString","useQueryParams","getQueryParam","setQueryParam","currentTab","useEffect","replace","stop","login","action","submitTitle","signup","onSubmit","username","password","variables","localAuthPayload","result","console","log","className","justify","align","style","minHeight","span","width","activeTabKey","onTabChange","message","type","showIcon","marginBottom","map","err","name","initialValues","remember","onFinish","values","Item","rules","required","prefix","UserOutlined","placeholder","LockOutlined","htmlType","ProtectedRoute","children","rest","fetchPolicy","useRouteMatch","to","UserHeader","loading","backgroundColor","verticalAlign","size","shape","me","Header","withLayout","Component","props","logoutMutation","theme","mode","selectedKeys","float","onClick","padding","colorMap","READY","IN_PROGRESS","DONE","REJECTED","titleMap","TaskTag","taskId","clickable","useState","popoverVisible","setPopoverVisible","setError","changeTaskStatusMutation","renderTag","onChangeSelect","cursor","color","e","stopPropagation","content","closable","onClose","tip","spinning","delay","display","flexDirection","Object","keys","filter","margin","changeTaskStatusInput","refetchQueries","errors","title","trigger","visible","onVisibleChange","placement","defaultProps","CountDownAlert","onAfterClose","onExpire","startFromSeconds","seconds","useTimer","expiryTimestamp","Date","getTime","description","closeText","afterClose","Option","Select","ModalContent","onSend","profiles","selectedUserId","setSelectedUserId","autoFocus","onChange","profile","id","icon","SendOutlined","disabled","ShareTaskTag","task","shareTaskMutation","shareLoading","useGetProfilesQuery","meData","author","renderModalContent","instance","userId","shareWithId","shareTaskInput","update","destroy","Modal","info","centered","okText","onShareClick","Text","Typography","TasksEventsTimeline","showEvents","setShowEvents","currentUserId","events","taskEvents","getCreatedRow","user","createdAt","when","formatDistanceToNow","interval","duration","component","Timeline","componentProps","gutter","forcedReplay","index","event","length","dot","ArrowDownOutlined","Paragraph","Title","TaskModal","newTitle","setNewTitle","newDescription","setNewDescription","updateTaskDetailsMutation","onCancel","confirm","ExclamationCircleOutlined","cancelText","onOk","onSave","taskDetails","bodyStyle","maxHeight","overflow","destroyOnClose","justifyContent","alignItems","level","editable","newValue","footer","updatedAt","getAuthorName","direction","paddingLeft","descriptionFallback","offset","TaskCard","modalVisible","setModalVisible","hoverable","extra","actions","textAlign","ellipsis","rows","expandable","TASKS","layout","labelCol","wrapperCol","AddTaskModal","Form","useForm","form","createTaskMutation","validateFields","newTaskData","store","addTask","queryData","readQuery","tasks","writeQuery","resetFields","okButtonProps","cancelButtonProps","label","TextArea","AddTaskCard","PlusCircleTwoTone","fontSize","Tasks","Row","DashboardPage","LoggedOutOnlyRoute","SharedTasksPage","sharedTasks","height","imageStyle","App","path","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca35f1ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const TOKEN_KEY = 'TASKS_APP_TOKEN';\n\nexport abstract class SyncStorage {\n  public static saveToken(token: string) {\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public static getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  public static getAuthHeader() {\n    const token = SyncStorage.getToken();\n\n    return token ? { authorization:`Bearer ${token}`} : {};\n  }\n\n  public static deleteToken() {\n    localStorage.removeItem(TOKEN_KEY);\n  }\n}\n","import { gql, InMemoryCache, Resolver } from \"apollo-boost\";\nimport { SyncStorage } from \"../../services/SyncStorage\";\nimport { client } from \"../../apollo/client\";\n\nexport const GET_SESSION = gql` \n query GetSession {\n    session @client  \n}`;\n\nexport const SET_SESSION = gql` \n mutation SetSession($access_token: String!) {\n    setSession(access_token: $access_token) @client\n }\n `;\n\nexport const LOGOUT = gql` \n mutation Logout($nothing: Boolean) {\n    logout(nothing: $nothing) @client\n }`;\n\nexport const SessionMutations: Record<string, Resolver> = {\n    setSession: (_, { access_token }: { access_token: string }, { cache }: { cache: InMemoryCache }) => {\n        cache.writeData({\n            data: { session: access_token }\n        });\n        SyncStorage.saveToken(access_token);\n\n        return null;\n    },\n    logout: async () => {\n        SyncStorage.deleteToken();\n        // client.stop()\n        await client.resetStore()\n        // eslint-disable-next-line no-restricted-globals\n        // history.go('/auth');\n\n        return null;\n    }\n};","import { LOGOUT } from './../graphql/client/cache';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from 'apollo-link';\n\nimport { SyncStorage } from \"../services/SyncStorage\";\nimport { SessionMutations } from \"../graphql/client/cache\";\n\nconst cache = new InMemoryCache();\n\ncache.writeData({\n  data: {\n    session: SyncStorage.getToken(),\n  }\n});\n\nconst httpLink = createHttpLink({\n  uri: \"http://5f98598f.ngrok.io/graphql\"\n});\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    ...SyncStorage.getAuthHeader()\n  }\n}));\n\nconst errorLink = onError(({ networkError, graphQLErrors = [], operation }) =>{\n  const { response } = operation.getContext()\n\n  const unauthorized = graphQLErrors.find((error) => {\n    return error?.extensions?.exception?.response?.statusCode === 401;\n  })\n\n  if (response?.status === 401 || unauthorized) {\n    client.mutate({ mutation: LOGOUT }).catch()\n  }\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([errorLink, authLink, httpLink]),\n  cache,\n  resolvers: {\n    Mutation: {\n      ...SessionMutations\n    }\n  }\n});\n\nclient.onResetStore(async () => {\n  cache.writeData({\n    data: {\n      session: SyncStorage.getToken(),\n    }\n  })\n});\n\n\nexport { cache, client };","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n}\n\n\nexport interface ChangeTaskStatusInput {\n  taskId: Scalars['Int'];\n  status: TaskStatus;\n}\n\nexport interface LocalAuthPayload {\n  username: Scalars['String'];\n  password: Scalars['String'];\n}\n\nexport interface Mutation {\n   __typename?: 'Mutation';\n  addTask: Task;\n  changeTaskStatus: Task;\n  login: UserLoginSuccess;\n  logout?: Maybe<Scalars['Boolean']>;\n  removeTask: Scalars['Int'];\n  setSession?: Maybe<Scalars['Boolean']>;\n  shareTask: Task;\n  signup: UserLoginSuccess;\n  updateTaskDetails: Task;\n}\n\n\nexport interface MutationAddTaskArgs {\n  newTaskData: NewTaskInput;\n}\n\n\nexport interface MutationChangeTaskStatusArgs {\n  changeTaskStatusInput: ChangeTaskStatusInput;\n}\n\n\nexport interface MutationLoginArgs {\n  localAuthPayload: LocalAuthPayload;\n}\n\n\nexport interface MutationLogoutArgs {\n  nothing?: Maybe<Scalars['Boolean']>;\n}\n\n\nexport interface MutationRemoveTaskArgs {\n  id: Scalars['Int'];\n}\n\n\nexport interface MutationSetSessionArgs {\n  access_token: Scalars['String'];\n}\n\n\nexport interface MutationShareTaskArgs {\n  shareTaskInput: ShareTaskInput;\n}\n\n\nexport interface MutationSignupArgs {\n  localAuthPayload: LocalAuthPayload;\n}\n\n\nexport interface MutationUpdateTaskDetailsArgs {\n  taskDetails: UpdateTaskDetails;\n}\n\nexport interface NewTaskInput {\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n}\n\nexport interface Profile {\n   __typename?: 'Profile';\n  id: Scalars['Int'];\n  username: Scalars['String'];\n}\n\nexport interface Query {\n   __typename?: 'Query';\n  me: User;\n  profiles: Array<Profile>;\n  session?: Maybe<Scalars['String']>;\n  sharedTasks: Array<Task>;\n  task: Task;\n  taskEvents: Array<TaskStatusHistoryEvent>;\n  tasks: Array<Task>;\n}\n\n\nexport interface QueryTaskArgs {\n  id: Scalars['Int'];\n}\n\n\nexport interface QueryTaskEventsArgs {\n  taskId: Scalars['Int'];\n}\n\nexport interface ShareTaskInput {\n  taskId: Scalars['Int'];\n  shareWithId: Scalars['Int'];\n}\n\nexport interface Task {\n   __typename?: 'Task';\n  id: Scalars['Int'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  author: User;\n  status: TaskStatus;\n  user: User;\n}\n\nexport enum TaskStatus {\n  READY = 'READY',\n  IN_PROGRESS = 'IN_PROGRESS',\n  DONE = 'DONE',\n  REJECTED = 'REJECTED'\n}\n\nexport interface TaskStatusHistoryEvent {\n   __typename?: 'TaskStatusHistoryEvent';\n  id: Scalars['Int'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  taskId: Scalars['Int'];\n  userId: Scalars['Int'];\n  status: TaskStatus;\n  user: User;\n}\n\nexport interface UpdateTaskDetails {\n  taskId: Scalars['Int'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n}\n\nexport interface User {\n   __typename?: 'User';\n  id: Scalars['Int'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  username: Scalars['String'];\n  tasks: Array<Task>;\n}\n\nexport interface UserLoginSuccess {\n   __typename?: 'UserLoginSuccess';\n  id: Scalars['Int'];\n  createdAt: Scalars['String'];\n  updatedAt: Scalars['String'];\n  username: Scalars['String'];\n  tasks: Array<Task>;\n  access_token: Scalars['String'];\n}\n\nexport type GetSessionQueryVariables = {};\n\n\nexport type GetSessionQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'session'>\n);\n\nexport type SetSessionMutationVariables = {\n  access_token: Scalars['String'];\n};\n\n\nexport type SetSessionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'setSession'>\n);\n\nexport type LogoutMutationVariables = {\n  nothing?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type LoginMutationVariables = {\n  localAuthPayload: LocalAuthPayload;\n};\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'UserLoginSuccess' }\n    & Pick<UserLoginSuccess, 'id' | 'username' | 'access_token'>\n  ) }\n);\n\nexport type SignupMutationVariables = {\n  localAuthPayload: LocalAuthPayload;\n};\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup: (\n    { __typename?: 'UserLoginSuccess' }\n    & Pick<UserLoginSuccess, 'id' | 'username' | 'access_token'>\n  ) }\n);\n\nexport type ChangeTaskStatusMutationVariables = {\n  changeTaskStatusInput: ChangeTaskStatusInput;\n};\n\n\nexport type ChangeTaskStatusMutation = (\n  { __typename?: 'Mutation' }\n  & { changeTaskStatus: (\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'description' | 'status' | 'createdAt' | 'updatedAt'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  ) }\n);\n\nexport type UpdateTaskDetailsMutationVariables = {\n  taskDetails: UpdateTaskDetails;\n};\n\n\nexport type UpdateTaskDetailsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateTaskDetails: (\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'description' | 'status' | 'createdAt' | 'updatedAt'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  ) }\n);\n\nexport type CreateTaskMutationVariables = {\n  newTaskData: NewTaskInput;\n};\n\n\nexport type CreateTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { addTask: (\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'description' | 'status' | 'createdAt' | 'updatedAt'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  ) }\n);\n\nexport type ShareTaskMutationVariables = {\n  shareTaskInput: ShareTaskInput;\n};\n\n\nexport type ShareTaskMutation = (\n  { __typename?: 'Mutation' }\n  & { shareTask: (\n    { __typename?: 'Task' }\n    & Pick<Task, 'id'>\n  ) }\n);\n\nexport type MeQueryVariables = {};\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'username'>\n  ) }\n);\n\nexport type GetTasksQueryVariables = {};\n\n\nexport type GetTasksQuery = (\n  { __typename?: 'Query' }\n  & { tasks: Array<(\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt' | 'status'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  )> }\n);\n\nexport type GetProfilesQueryVariables = {};\n\n\nexport type GetProfilesQuery = (\n  { __typename?: 'Query' }\n  & { profiles: Array<(\n    { __typename?: 'Profile' }\n    & Pick<Profile, 'id' | 'username'>\n  )> }\n);\n\nexport type GetSharedTasksQueryVariables = {};\n\n\nexport type GetSharedTasksQuery = (\n  { __typename?: 'Query' }\n  & { sharedTasks: Array<(\n    { __typename?: 'Task' }\n    & Pick<Task, 'id' | 'title' | 'description' | 'createdAt' | 'updatedAt' | 'status'>\n    & { author: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  )> }\n);\n\nexport type GetTaskEventsQueryVariables = {\n  taskId: Scalars['Int'];\n};\n\n\nexport type GetTaskEventsQuery = (\n  { __typename?: 'Query' }\n  & { taskEvents: Array<(\n    { __typename?: 'TaskStatusHistoryEvent' }\n    & Pick<TaskStatusHistoryEvent, 'id' | 'createdAt' | 'taskId' | 'status'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'username'>\n    ) }\n  )> }\n);\n\n\nexport const GetSessionDocument = gql`\n    query GetSession {\n  session @client\n}\n    `;\nexport type GetSessionComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetSessionQuery, GetSessionQueryVariables>, 'query'>;\n\n    export const GetSessionComponent = (props: GetSessionComponentProps) => (\n      <ApolloReactComponents.Query<GetSessionQuery, GetSessionQueryVariables> query={GetSessionDocument} {...props} />\n    );\n    \nexport type GetSessionProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetSessionQuery, GetSessionQueryVariables> & TChildProps;\nexport function withGetSession<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetSessionQuery,\n  GetSessionQueryVariables,\n  GetSessionProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetSessionQuery, GetSessionQueryVariables, GetSessionProps<TChildProps>>(GetSessionDocument, {\n      alias: 'getSession',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetSessionQuery__\n *\n * To run a query within a React component, call `useGetSessionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSessionQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSessionQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSessionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSessionQuery, GetSessionQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSessionQuery, GetSessionQueryVariables>(GetSessionDocument, baseOptions);\n      }\nexport function useGetSessionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSessionQuery, GetSessionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSessionQuery, GetSessionQueryVariables>(GetSessionDocument, baseOptions);\n        }\nexport type GetSessionQueryHookResult = ReturnType<typeof useGetSessionQuery>;\nexport type GetSessionLazyQueryHookResult = ReturnType<typeof useGetSessionLazyQuery>;\nexport type GetSessionQueryResult = ApolloReactCommon.QueryResult<GetSessionQuery, GetSessionQueryVariables>;\nexport const SetSessionDocument = gql`\n    mutation SetSession($access_token: String!) {\n  setSession(access_token: $access_token) @client\n}\n    `;\nexport type SetSessionMutationFn = ApolloReactCommon.MutationFunction<SetSessionMutation, SetSessionMutationVariables>;\nexport type SetSessionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SetSessionMutation, SetSessionMutationVariables>, 'mutation'>;\n\n    export const SetSessionComponent = (props: SetSessionComponentProps) => (\n      <ApolloReactComponents.Mutation<SetSessionMutation, SetSessionMutationVariables> mutation={SetSessionDocument} {...props} />\n    );\n    \nexport type SetSessionProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SetSessionMutation, SetSessionMutationVariables> & TChildProps;\nexport function withSetSession<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  SetSessionMutation,\n  SetSessionMutationVariables,\n  SetSessionProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, SetSessionMutation, SetSessionMutationVariables, SetSessionProps<TChildProps>>(SetSessionDocument, {\n      alias: 'setSession',\n      ...operationOptions\n    });\n};\n\n/**\n * __useSetSessionMutation__\n *\n * To run a mutation, you first call `useSetSessionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSetSessionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [setSessionMutation, { data, loading, error }] = useSetSessionMutation({\n *   variables: {\n *      access_token: // value for 'access_token'\n *   },\n * });\n */\nexport function useSetSessionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SetSessionMutation, SetSessionMutationVariables>) {\n        return ApolloReactHooks.useMutation<SetSessionMutation, SetSessionMutationVariables>(SetSessionDocument, baseOptions);\n      }\nexport type SetSessionMutationHookResult = ReturnType<typeof useSetSessionMutation>;\nexport type SetSessionMutationResult = ApolloReactCommon.MutationResult<SetSessionMutation>;\nexport type SetSessionMutationOptions = ApolloReactCommon.BaseMutationOptions<SetSessionMutation, SetSessionMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout($nothing: Boolean) {\n  logout(nothing: $nothing) @client\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\nexport type LogoutComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LogoutMutation, LogoutMutationVariables>, 'mutation'>;\n\n    export const LogoutComponent = (props: LogoutComponentProps) => (\n      <ApolloReactComponents.Mutation<LogoutMutation, LogoutMutationVariables> mutation={LogoutDocument} {...props} />\n    );\n    \nexport type LogoutProps<TChildProps = {}> = ApolloReactHoc.MutateProps<LogoutMutation, LogoutMutationVariables> & TChildProps;\nexport function withLogout<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LogoutMutation,\n  LogoutMutationVariables,\n  LogoutProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, LogoutMutation, LogoutMutationVariables, LogoutProps<TChildProps>>(LogoutDocument, {\n      alias: 'logout',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *      nothing: // value for 'nothing'\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($localAuthPayload: LocalAuthPayload!) {\n  login(localAuthPayload: $localAuthPayload) {\n    id\n    username\n    access_token\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \nexport type LoginProps<TChildProps = {}> = ApolloReactHoc.MutateProps<LoginMutation, LoginMutationVariables> & TChildProps;\nexport function withLogin<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LoginMutation,\n  LoginMutationVariables,\n  LoginProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, LoginMutation, LoginMutationVariables, LoginProps<TChildProps>>(LoginDocument, {\n      alias: 'login',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      localAuthPayload: // value for 'localAuthPayload'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const SignupDocument = gql`\n    mutation Signup($localAuthPayload: LocalAuthPayload!) {\n  signup(localAuthPayload: $localAuthPayload) {\n    id\n    username\n    access_token\n  }\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\nexport type SignupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SignupMutation, SignupMutationVariables>, 'mutation'>;\n\n    export const SignupComponent = (props: SignupComponentProps) => (\n      <ApolloReactComponents.Mutation<SignupMutation, SignupMutationVariables> mutation={SignupDocument} {...props} />\n    );\n    \nexport type SignupProps<TChildProps = {}> = ApolloReactHoc.MutateProps<SignupMutation, SignupMutationVariables> & TChildProps;\nexport function withSignup<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  SignupMutation,\n  SignupMutationVariables,\n  SignupProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, SignupMutation, SignupMutationVariables, SignupProps<TChildProps>>(SignupDocument, {\n      alias: 'signup',\n      ...operationOptions\n    });\n};\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      localAuthPayload: // value for 'localAuthPayload'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const ChangeTaskStatusDocument = gql`\n    mutation ChangeTaskStatus($changeTaskStatusInput: ChangeTaskStatusInput!) {\n  changeTaskStatus(changeTaskStatusInput: $changeTaskStatusInput) {\n    id\n    title\n    description\n    status\n    createdAt\n    updatedAt\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type ChangeTaskStatusMutationFn = ApolloReactCommon.MutationFunction<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables>;\nexport type ChangeTaskStatusComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables>, 'mutation'>;\n\n    export const ChangeTaskStatusComponent = (props: ChangeTaskStatusComponentProps) => (\n      <ApolloReactComponents.Mutation<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables> mutation={ChangeTaskStatusDocument} {...props} />\n    );\n    \nexport type ChangeTaskStatusProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables> & TChildProps;\nexport function withChangeTaskStatus<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ChangeTaskStatusMutation,\n  ChangeTaskStatusMutationVariables,\n  ChangeTaskStatusProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables, ChangeTaskStatusProps<TChildProps>>(ChangeTaskStatusDocument, {\n      alias: 'changeTaskStatus',\n      ...operationOptions\n    });\n};\n\n/**\n * __useChangeTaskStatusMutation__\n *\n * To run a mutation, you first call `useChangeTaskStatusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeTaskStatusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeTaskStatusMutation, { data, loading, error }] = useChangeTaskStatusMutation({\n *   variables: {\n *      changeTaskStatusInput: // value for 'changeTaskStatusInput'\n *   },\n * });\n */\nexport function useChangeTaskStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables>) {\n        return ApolloReactHooks.useMutation<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables>(ChangeTaskStatusDocument, baseOptions);\n      }\nexport type ChangeTaskStatusMutationHookResult = ReturnType<typeof useChangeTaskStatusMutation>;\nexport type ChangeTaskStatusMutationResult = ApolloReactCommon.MutationResult<ChangeTaskStatusMutation>;\nexport type ChangeTaskStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeTaskStatusMutation, ChangeTaskStatusMutationVariables>;\nexport const UpdateTaskDetailsDocument = gql`\n    mutation UpdateTaskDetails($taskDetails: UpdateTaskDetails!) {\n  updateTaskDetails(taskDetails: $taskDetails) {\n    id\n    title\n    description\n    status\n    createdAt\n    updatedAt\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type UpdateTaskDetailsMutationFn = ApolloReactCommon.MutationFunction<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables>;\nexport type UpdateTaskDetailsComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables>, 'mutation'>;\n\n    export const UpdateTaskDetailsComponent = (props: UpdateTaskDetailsComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables> mutation={UpdateTaskDetailsDocument} {...props} />\n    );\n    \nexport type UpdateTaskDetailsProps<TChildProps = {}> = ApolloReactHoc.MutateProps<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables> & TChildProps;\nexport function withUpdateTaskDetails<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  UpdateTaskDetailsMutation,\n  UpdateTaskDetailsMutationVariables,\n  UpdateTaskDetailsProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables, UpdateTaskDetailsProps<TChildProps>>(UpdateTaskDetailsDocument, {\n      alias: 'updateTaskDetails',\n      ...operationOptions\n    });\n};\n\n/**\n * __useUpdateTaskDetailsMutation__\n *\n * To run a mutation, you first call `useUpdateTaskDetailsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTaskDetailsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTaskDetailsMutation, { data, loading, error }] = useUpdateTaskDetailsMutation({\n *   variables: {\n *      taskDetails: // value for 'taskDetails'\n *   },\n * });\n */\nexport function useUpdateTaskDetailsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables>(UpdateTaskDetailsDocument, baseOptions);\n      }\nexport type UpdateTaskDetailsMutationHookResult = ReturnType<typeof useUpdateTaskDetailsMutation>;\nexport type UpdateTaskDetailsMutationResult = ApolloReactCommon.MutationResult<UpdateTaskDetailsMutation>;\nexport type UpdateTaskDetailsMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTaskDetailsMutation, UpdateTaskDetailsMutationVariables>;\nexport const CreateTaskDocument = gql`\n    mutation CreateTask($newTaskData: NewTaskInput!) {\n  addTask(newTaskData: $newTaskData) {\n    id\n    title\n    description\n    status\n    createdAt\n    updatedAt\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type CreateTaskMutationFn = ApolloReactCommon.MutationFunction<CreateTaskMutation, CreateTaskMutationVariables>;\nexport type CreateTaskComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTaskMutation, CreateTaskMutationVariables>, 'mutation'>;\n\n    export const CreateTaskComponent = (props: CreateTaskComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateTaskMutation, CreateTaskMutationVariables> mutation={CreateTaskDocument} {...props} />\n    );\n    \nexport type CreateTaskProps<TChildProps = {}> = ApolloReactHoc.MutateProps<CreateTaskMutation, CreateTaskMutationVariables> & TChildProps;\nexport function withCreateTask<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CreateTaskMutation,\n  CreateTaskMutationVariables,\n  CreateTaskProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, CreateTaskMutation, CreateTaskMutationVariables, CreateTaskProps<TChildProps>>(CreateTaskDocument, {\n      alias: 'createTask',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCreateTaskMutation__\n *\n * To run a mutation, you first call `useCreateTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTaskMutation, { data, loading, error }] = useCreateTaskMutation({\n *   variables: {\n *      newTaskData: // value for 'newTaskData'\n *   },\n * });\n */\nexport function useCreateTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTaskMutation, CreateTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTaskMutation, CreateTaskMutationVariables>(CreateTaskDocument, baseOptions);\n      }\nexport type CreateTaskMutationHookResult = ReturnType<typeof useCreateTaskMutation>;\nexport type CreateTaskMutationResult = ApolloReactCommon.MutationResult<CreateTaskMutation>;\nexport type CreateTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTaskMutation, CreateTaskMutationVariables>;\nexport const ShareTaskDocument = gql`\n    mutation ShareTask($shareTaskInput: ShareTaskInput!) {\n  shareTask(shareTaskInput: $shareTaskInput) {\n    id\n  }\n}\n    `;\nexport type ShareTaskMutationFn = ApolloReactCommon.MutationFunction<ShareTaskMutation, ShareTaskMutationVariables>;\nexport type ShareTaskComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<ShareTaskMutation, ShareTaskMutationVariables>, 'mutation'>;\n\n    export const ShareTaskComponent = (props: ShareTaskComponentProps) => (\n      <ApolloReactComponents.Mutation<ShareTaskMutation, ShareTaskMutationVariables> mutation={ShareTaskDocument} {...props} />\n    );\n    \nexport type ShareTaskProps<TChildProps = {}> = ApolloReactHoc.MutateProps<ShareTaskMutation, ShareTaskMutationVariables> & TChildProps;\nexport function withShareTask<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ShareTaskMutation,\n  ShareTaskMutationVariables,\n  ShareTaskProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, ShareTaskMutation, ShareTaskMutationVariables, ShareTaskProps<TChildProps>>(ShareTaskDocument, {\n      alias: 'shareTask',\n      ...operationOptions\n    });\n};\n\n/**\n * __useShareTaskMutation__\n *\n * To run a mutation, you first call `useShareTaskMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useShareTaskMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [shareTaskMutation, { data, loading, error }] = useShareTaskMutation({\n *   variables: {\n *      shareTaskInput: // value for 'shareTaskInput'\n *   },\n * });\n */\nexport function useShareTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ShareTaskMutation, ShareTaskMutationVariables>) {\n        return ApolloReactHooks.useMutation<ShareTaskMutation, ShareTaskMutationVariables>(ShareTaskDocument, baseOptions);\n      }\nexport type ShareTaskMutationHookResult = ReturnType<typeof useShareTaskMutation>;\nexport type ShareTaskMutationResult = ApolloReactCommon.MutationResult<ShareTaskMutation>;\nexport type ShareTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<ShareTaskMutation, ShareTaskMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    username\n  }\n}\n    `;\nexport type MeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MeQuery, MeQueryVariables>, 'query'>;\n\n    export const MeComponent = (props: MeComponentProps) => (\n      <ApolloReactComponents.Query<MeQuery, MeQueryVariables> query={MeDocument} {...props} />\n    );\n    \nexport type MeProps<TChildProps = {}> = ApolloReactHoc.DataProps<MeQuery, MeQueryVariables> & TChildProps;\nexport function withMe<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  MeQuery,\n  MeQueryVariables,\n  MeProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, MeQuery, MeQueryVariables, MeProps<TChildProps>>(MeDocument, {\n      alias: 'me',\n      ...operationOptions\n    });\n};\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const GetTasksDocument = gql`\n    query GetTasks {\n  tasks {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    status\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type GetTasksComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTasksQuery, GetTasksQueryVariables>, 'query'>;\n\n    export const GetTasksComponent = (props: GetTasksComponentProps) => (\n      <ApolloReactComponents.Query<GetTasksQuery, GetTasksQueryVariables> query={GetTasksDocument} {...props} />\n    );\n    \nexport type GetTasksProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetTasksQuery, GetTasksQueryVariables> & TChildProps;\nexport function withGetTasks<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetTasksQuery,\n  GetTasksQueryVariables,\n  GetTasksProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetTasksQuery, GetTasksQueryVariables, GetTasksProps<TChildProps>>(GetTasksDocument, {\n      alias: 'getTasks',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetTasksQuery__\n *\n * To run a query within a React component, call `useGetTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTasksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTasksQuery, GetTasksQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTasksQuery, GetTasksQueryVariables>(GetTasksDocument, baseOptions);\n      }\nexport function useGetTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTasksQuery, GetTasksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTasksQuery, GetTasksQueryVariables>(GetTasksDocument, baseOptions);\n        }\nexport type GetTasksQueryHookResult = ReturnType<typeof useGetTasksQuery>;\nexport type GetTasksLazyQueryHookResult = ReturnType<typeof useGetTasksLazyQuery>;\nexport type GetTasksQueryResult = ApolloReactCommon.QueryResult<GetTasksQuery, GetTasksQueryVariables>;\nexport const GetProfilesDocument = gql`\n    query GetProfiles {\n  profiles {\n    id\n    username\n  }\n}\n    `;\nexport type GetProfilesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetProfilesQuery, GetProfilesQueryVariables>, 'query'>;\n\n    export const GetProfilesComponent = (props: GetProfilesComponentProps) => (\n      <ApolloReactComponents.Query<GetProfilesQuery, GetProfilesQueryVariables> query={GetProfilesDocument} {...props} />\n    );\n    \nexport type GetProfilesProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetProfilesQuery, GetProfilesQueryVariables> & TChildProps;\nexport function withGetProfiles<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetProfilesQuery,\n  GetProfilesQueryVariables,\n  GetProfilesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetProfilesQuery, GetProfilesQueryVariables, GetProfilesProps<TChildProps>>(GetProfilesDocument, {\n      alias: 'getProfiles',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetProfilesQuery__\n *\n * To run a query within a React component, call `useGetProfilesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProfilesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProfilesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProfilesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProfilesQuery, GetProfilesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetProfilesQuery, GetProfilesQueryVariables>(GetProfilesDocument, baseOptions);\n      }\nexport function useGetProfilesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProfilesQuery, GetProfilesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetProfilesQuery, GetProfilesQueryVariables>(GetProfilesDocument, baseOptions);\n        }\nexport type GetProfilesQueryHookResult = ReturnType<typeof useGetProfilesQuery>;\nexport type GetProfilesLazyQueryHookResult = ReturnType<typeof useGetProfilesLazyQuery>;\nexport type GetProfilesQueryResult = ApolloReactCommon.QueryResult<GetProfilesQuery, GetProfilesQueryVariables>;\nexport const GetSharedTasksDocument = gql`\n    query GetSharedTasks {\n  sharedTasks {\n    id\n    title\n    description\n    createdAt\n    updatedAt\n    status\n    author {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type GetSharedTasksComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetSharedTasksQuery, GetSharedTasksQueryVariables>, 'query'>;\n\n    export const GetSharedTasksComponent = (props: GetSharedTasksComponentProps) => (\n      <ApolloReactComponents.Query<GetSharedTasksQuery, GetSharedTasksQueryVariables> query={GetSharedTasksDocument} {...props} />\n    );\n    \nexport type GetSharedTasksProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetSharedTasksQuery, GetSharedTasksQueryVariables> & TChildProps;\nexport function withGetSharedTasks<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetSharedTasksQuery,\n  GetSharedTasksQueryVariables,\n  GetSharedTasksProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetSharedTasksQuery, GetSharedTasksQueryVariables, GetSharedTasksProps<TChildProps>>(GetSharedTasksDocument, {\n      alias: 'getSharedTasks',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetSharedTasksQuery__\n *\n * To run a query within a React component, call `useGetSharedTasksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSharedTasksQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSharedTasksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSharedTasksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSharedTasksQuery, GetSharedTasksQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetSharedTasksQuery, GetSharedTasksQueryVariables>(GetSharedTasksDocument, baseOptions);\n      }\nexport function useGetSharedTasksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSharedTasksQuery, GetSharedTasksQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetSharedTasksQuery, GetSharedTasksQueryVariables>(GetSharedTasksDocument, baseOptions);\n        }\nexport type GetSharedTasksQueryHookResult = ReturnType<typeof useGetSharedTasksQuery>;\nexport type GetSharedTasksLazyQueryHookResult = ReturnType<typeof useGetSharedTasksLazyQuery>;\nexport type GetSharedTasksQueryResult = ApolloReactCommon.QueryResult<GetSharedTasksQuery, GetSharedTasksQueryVariables>;\nexport const GetTaskEventsDocument = gql`\n    query GetTaskEvents($taskId: Int!) {\n  taskEvents(taskId: $taskId) {\n    id\n    createdAt\n    taskId\n    status\n    user {\n      id\n      username\n    }\n  }\n}\n    `;\nexport type GetTaskEventsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTaskEventsQuery, GetTaskEventsQueryVariables>, 'query'> & ({ variables: GetTaskEventsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTaskEventsComponent = (props: GetTaskEventsComponentProps) => (\n      <ApolloReactComponents.Query<GetTaskEventsQuery, GetTaskEventsQueryVariables> query={GetTaskEventsDocument} {...props} />\n    );\n    \nexport type GetTaskEventsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetTaskEventsQuery, GetTaskEventsQueryVariables> & TChildProps;\nexport function withGetTaskEvents<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetTaskEventsQuery,\n  GetTaskEventsQueryVariables,\n  GetTaskEventsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetTaskEventsQuery, GetTaskEventsQueryVariables, GetTaskEventsProps<TChildProps>>(GetTaskEventsDocument, {\n      alias: 'getTaskEvents',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetTaskEventsQuery__\n *\n * To run a query within a React component, call `useGetTaskEventsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTaskEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTaskEventsQuery({\n *   variables: {\n *      taskId: // value for 'taskId'\n *   },\n * });\n */\nexport function useGetTaskEventsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTaskEventsQuery, GetTaskEventsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTaskEventsQuery, GetTaskEventsQueryVariables>(GetTaskEventsDocument, baseOptions);\n      }\nexport function useGetTaskEventsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTaskEventsQuery, GetTaskEventsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTaskEventsQuery, GetTaskEventsQueryVariables>(GetTaskEventsDocument, baseOptions);\n        }\nexport type GetTaskEventsQueryHookResult = ReturnType<typeof useGetTaskEventsQuery>;\nexport type GetTaskEventsLazyQueryHookResult = ReturnType<typeof useGetTaskEventsLazyQuery>;\nexport type GetTaskEventsQueryResult = ApolloReactCommon.QueryResult<GetTaskEventsQuery, GetTaskEventsQueryVariables>;","import React, { useEffect } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Layout as AntdLayout,\n  Row,\n  Col,\n  Card,\n  Alert\n} from \"antd\";\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\n\nimport {\n  useLoginMutation,\n  useSignupMutation,\n  LoginMutationResult,\n  SignupMutationResult,\n  useSetSessionMutation,\n  useGetSessionQuery\n} from \"../../generated/graphql\";\nimport { useQueryParams } from \"../../hooks/use-query-params\";\nimport { useHistory } from \"react-router-dom\";\n\nconst { Content } = AntdLayout;\n\nconst tabList = [\n  {\n    key: \"login\",\n    tab: \"Log in\"\n  },\n  {\n    key: \"signup\",\n    tab: \"Sign up\"\n  }\n];\n\nexport const AuthPage = () => {\n  const { data, client } = useGetSessionQuery();\n  const history = useHistory();\n  const [loginMutation, { error: loginError }] = useLoginMutation();\n  const [signupMutation, { error: signupError }] = useSignupMutation();\n  const [setSessionMutation] = useSetSessionMutation();\n  const [getQueryParam, setQueryParam] = useQueryParams();\n  const currentTab = getQueryParam(\"tab\", \"login\");\n\n  useEffect(() => {\n    if (!getQueryParam(\"tab\", \"\")) {\n      setQueryParam(\"tab\", \"login\");\n    }\n\n    if (data?.session) {\n      history.replace(\"/\");\n    }\n    client.stop();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const payload = {\n    login: {\n      action: loginMutation,\n      submitTitle: \"Log in\"\n    },\n    signup: {\n      action: signupMutation,\n      submitTitle: \"Sign up\"\n    }\n  };\n\n  const { action, submitTitle } = payload[currentTab as \"login\" | \"signup\"];\n\n  const onSubmit = async ({\n    username,\n    password\n  }: {\n    username: string;\n    password: string;\n  }) => {\n    try {\n      const result = await action({\n        variables: { localAuthPayload: { username, password } }\n      });\n      const data = result.data || {};\n      let access_token;\n\n      if (\"login\" in data) {\n        access_token = (result as LoginMutationResult).data?.login.access_token;\n      }\n\n      if (\"signup\" in data) {\n        access_token = (result as SignupMutationResult).data?.signup\n          .access_token;\n      }\n\n      if (access_token) {\n        await setSessionMutation({ variables: { access_token } });\n        history.replace(\"/\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <AntdLayout className=\"layout\">\n      <Content>\n        <Row justify=\"center\" align=\"middle\" style={{ minHeight: \"100vh\" }}>\n          <Col span={8}>\n            <Card\n              style={{ width: \"100%\" }}\n              tabList={tabList}\n              activeTabKey={currentTab}\n              onTabChange={key => setQueryParam(\"tab\", key)}\n            >\n              {loginError && currentTab === \"login\" && (\n                <Alert\n                  message=\"Bad login or password\"\n                  type=\"error\"\n                  showIcon\n                  style={{ marginBottom: \"20px\" }}\n                />\n              )}\n\n              {signupError &&\n                currentTab === \"signup\" &&\n                signupError.graphQLErrors.map(err => (\n                  <Alert\n                    key={err.message}\n                    message={err.message}\n                    type=\"error\"\n                    showIcon\n                    style={{ marginBottom: \"20px\" }}\n                  />\n                ))}\n\n              <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{ remember: true }}\n                onFinish={values => {\n                  onSubmit(values as { username: string; password: string });\n                }}\n              >\n                <Form.Item\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"Please input your Username!\" }\n                  ]}\n                >\n                  <Input\n                    prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                    placeholder=\"Username\"\n                  />\n                </Form.Item>\n                <Form.Item\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your Password!\" }\n                  ]}\n                >\n                  <Input\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />\n                </Form.Item>\n\n                <Form.Item>\n                  <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    className=\"login-form-button\"\n                  >\n                    {submitTitle}\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Card>\n          </Col>\n        </Row>\n      </Content>\n    </AntdLayout>\n  );\n};\n","import { useLocation, useHistory } from \"react-router-dom\";\n\nexport function useQueryParams(): [(key: string, defaultValue: string) => string, (key: string, value: string) => void] {\n  const location = useLocation();\n  const history = useHistory();\n  const query = new URLSearchParams(location.search)\n\n  const get = (key: string, defaultValue: string) => query.get(key) || defaultValue;\n  const set = (key: string, value: string) => {\n    query.set(key, value);\n    history.push({\n      pathname: location.pathname,\n      search: query.toString()\n    });\n  };\n\n  return [get, set];\n}","import React from \"react\";\nimport { Redirect, Route, useRouteMatch } from \"react-router-dom\";\nimport { useGetSessionQuery } from \"../../generated/graphql\";\n\nexport const ProtectedRoute = ({ children, ...rest }: any) => {\n  const { data } = useGetSessionQuery({ fetchPolicy: 'cache-only' });\n  const match = useRouteMatch(\"/auth\");\n\n  if (!data?.session && !match) {\n    return <Redirect to={{ pathname: \"/auth\" }} />;\n  }\n\n  return <Route {...rest}>{children}</Route>;\n};\n","import React from \"react\";\nimport { Avatar } from \"antd\";\n\nimport { useMeQuery } from \"../../generated/graphql\";\nimport \"./UserHeader.css\";\n\nexport const UserHeader = () => {\n  const { data, loading, error } = useMeQuery();\n\n  return (\n    <div className=\"user-header\">\n      <Avatar\n        style={{ backgroundColor: \"#f56a00\", verticalAlign: \"middle\" }}\n        size=\"large\"\n        shape=\"square\"\n      >\n        {data?.me.username}\n      </Avatar>\n    </div>\n  );\n};\n","import React, { ReactElement, ComponentType } from \"react\";\nimport { Layout as AntdLayout, Menu, Button } from \"antd\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nimport \"./Layout.css\";\nimport { useLogoutMutation } from \"../../generated/graphql\";\nimport { UserHeader } from \"../user-header/UserHeader\";\n\nconst { Header, Content } = AntdLayout;\n\nexport const withLayout = <P extends object>(Component: ComponentType<P>) => (\n  props: P\n): ReactElement => {\n  const location = useLocation();\n  const [logoutMutation] = useLogoutMutation();\n\n  return (\n    <AntdLayout className=\"layout\" style={{ minHeight: \"100vh\" }}>\n      <Header>\n        <UserHeader />\n        <Menu theme=\"dark\" mode=\"horizontal\" selectedKeys={[location.pathname]}>\n          <Menu.Item key=\"/\" style={{ float: \"left\" }}>\n            <NavLink to=\"/\" className=\"nav-text\">\n              My tasks\n            </NavLink>\n          </Menu.Item>\n\n          <Menu.Item key=\"/shared-tasks\" style={{ float: \"left\" }}>\n            <NavLink to=\"/shared-tasks\" className=\"nav-text\">\n              Shared Tasks\n            </NavLink>\n          </Menu.Item>\n\n          <Menu.Item style={{ float: \"right\" }}>\n            <Button type=\"danger\" onClick={() => logoutMutation()}>\n              Logout\n            </Button>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: \"0 50px\" }}>\n        <div className=\"site-layout-content\">\n          <Component {...props} />\n        </div>\n      </Content>\n    </AntdLayout>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport {\n  TaskStatus,\n  useChangeTaskStatusMutation,\n  GetTaskEventsDocument\n} from \"../../generated/graphql\";\nimport { Tag, Popover, Spin, Result, Alert } from \"antd\";\nimport { ApolloError } from \"apollo-boost\";\n\nconst colorMap: { [key in TaskStatus]: string } = {\n  [TaskStatus.READY]: \"default\",\n  [TaskStatus.IN_PROGRESS]: \"processing\",\n  [TaskStatus.DONE]: \"success\",\n  [TaskStatus.REJECTED]: \"error\"\n};\n\nconst titleMap: { [key in TaskStatus]: string } = {\n  [TaskStatus.READY]: \"Ready\",\n  [TaskStatus.IN_PROGRESS]: \"In Progress\",\n  [TaskStatus.DONE]: \"Done\",\n  [TaskStatus.REJECTED]: \"Rejected\"\n};\n\nexport const TaskTag: React.FC<{\n  taskId: number;\n  status: TaskStatus;\n  clickable?: boolean;\n}> = ({ taskId, status, clickable }) => {\n  const [popoverVisible, setPopoverVisible] = useState(false);\n  const [error, setError] = useState<ApolloError | null>(null);\n  const [changeTaskStatusMutation, { loading }] = useChangeTaskStatusMutation();\n\n  const renderTag = (\n    key: TaskStatus,\n    onChangeSelect?: (status: TaskStatus) => void\n  ) => {\n    return (\n      <Tag\n        style={clickable ? { cursor: \"pointer\" } : {}}\n        color={colorMap[key]}\n        onClick={e => {\n          e.stopPropagation();\n          onChangeSelect && onChangeSelect(key);\n        }}\n      >\n        {titleMap[key]}\n      </Tag>\n    );\n  };\n\n  return (\n    <Popover\n      content={\n        error ? (\n          <Alert\n            message={error.message}\n            type=\"error\"\n            showIcon\n            closable\n            onClose={() => setError(null)}\n          />\n        ) : (\n          <Spin tip=\"Loading...\" spinning={loading} delay={200}>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              {Object.keys(colorMap)\n                .filter(key => key !== status)\n                .map(key => (\n                  <div style={{ margin: \"5px\" }} key={key}>\n                    {renderTag(key as TaskStatus, async status => {\n                      try {\n                        const result = await changeTaskStatusMutation({\n                          variables: {\n                            changeTaskStatusInput: {\n                              taskId: taskId,\n                              status\n                            },\n                          },\n                          refetchQueries: [{ query: GetTaskEventsDocument, variables: { taskId }}]\n                        });\n\n                        if (!result?.errors) {\n                          setPopoverVisible(false);\n                        }\n                      } catch (e) {\n                        setError(e);\n                      }\n                    })}\n                  </div>\n                ))}\n            </div>\n          </Spin>\n        )\n      }\n      title=\"Change status\"\n      trigger=\"click\"\n      visible={popoverVisible && clickable}\n      onVisibleChange={setPopoverVisible}\n      placement=\"bottomRight\"\n    >\n      {renderTag(status)}\n    </Popover>\n  );\n};\n\nTaskTag.defaultProps = {\n  clickable: true\n};\n","import React from \"react\";\nimport { useTimer } from \"react-timer-hook\";\nimport { Alert } from \"antd\";\n\nexport const CountDownAlert: React.FC<{\n  onAfterClose: VoidFunction;\n  onExpire: VoidFunction;\n  startFromSeconds: number;\n  message: string;\n}> = ({ onAfterClose, onExpire, startFromSeconds, message }) => {\n  const { seconds } = useTimer({\n    expiryTimestamp: new Date().getTime() + startFromSeconds * 1000,\n    onExpire: onExpire\n  });\n\n  return (\n    <Alert\n      message={message}\n      description={`Closing in ${seconds}s`}\n      type=\"success\"\n      showIcon\n      closeText=\"Share again\"\n      afterClose={onAfterClose}\n    />\n  );\n};\n","import React, { useState } from \"react\";\nimport { Tag, Modal, Select, Button, Spin } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { ModalFunc } from \"antd/lib/modal/confirm\";\n\nimport {\n  Task,\n  useShareTaskMutation,\n  useGetProfilesQuery,\n  Profile,\n  useMeQuery\n} from \"../../generated/graphql\";\nimport { CountDownAlert } from \"../countdown-alert/CountDownAlert\";\n\nconst { Option } = Select;\n\nconst ModalContent: React.FC<{\n  onSend: (id?: number) => void;\n  loading: boolean;\n  profiles: Profile[];\n  time?: number;\n}> = ({ onSend, loading, profiles }) => {\n  const [selectedUserId, setSelectedUserId] = useState<number | undefined>();\n\n  return (\n    <Spin tip=\"Loading...\" spinning={loading} delay={200}>\n      <Select\n        autoFocus\n        style={{ width: \"90%\" }}\n        onChange={key => {\n          if (key) {\n            setSelectedUserId(+key);\n          }\n        }}\n      >\n        {profiles.map(profile => {\n          return (\n            <Option value={profile.id} key={profile.id}>\n              {profile.username}\n            </Option>\n          );\n        })}\n      </Select>\n      <Button\n        type=\"primary\"\n        loading={loading}\n        icon={<SendOutlined />}\n        style={{ float: \"right\" }}\n        disabled={!Boolean(selectedUserId && selectedUserId > 0)}\n        onClick={() => {\n          onSend(selectedUserId);\n        }}\n      />\n    </Spin>\n  );\n};\n\nexport const ShareTaskTag: React.FC<{ task: Task }> = ({ task }) => {\n  const [shareTaskMutation, { loading: shareLoading }] = useShareTaskMutation();\n  const { data } = useGetProfilesQuery();\n  const { data: meData } = useMeQuery({ fetchPolicy: \"cache-only\" });\n  const currentUserId = meData?.me.id || -1;\n\n  if (currentUserId !== task.author?.id) {\n    return null;\n  }\n\n  const profiles = data?.profiles || [];\n\n  const renderModalContent = (instance: ReturnType<ModalFunc>) => {\n    return (\n      <ModalContent\n        onSend={userId => {\n          onSend(instance, userId);\n        }}\n        loading={shareLoading}\n        profiles={profiles}\n      />\n    );\n  };\n\n  const onSend = async (\n    instance: ReturnType<ModalFunc>,\n    shareWithId?: number\n  ) => {\n    if (!shareWithId) {\n      return;\n    }\n\n    try {\n      await shareTaskMutation({\n        variables: {\n          shareTaskInput: {\n            taskId: task.id,\n            shareWithId\n          }\n        }\n      });\n\n      if (instance) {\n        instance.update({\n          content: (\n            <CountDownAlert\n              message=\"Task shared!\"\n              onExpire={instance.destroy}\n              startFromSeconds={5}\n              onAfterClose={() => {\n                instance.update({\n                  content: renderModalContent(instance)\n                });\n              }}\n            />\n          )\n        });\n      }\n    } catch {}\n  };\n\n  const onShareClick = () => {\n    const instance = Modal.info({\n      title: \"Select User to share\",\n      centered: true,\n      icon: null,\n      okText: \"Close\"\n    });\n\n    instance.update({ content: renderModalContent(instance) });\n  };\n\n  return (\n    <Tag\n      icon={<SendOutlined />}\n      onClick={e => {\n        e.stopPropagation();\n        onShareClick();\n      }}\n      style={{ cursor: \"pointer\", margin: \"5px\" }}\n    >\n      Share Task\n    </Tag>\n  );\n};\n","import React, { useState } from \"react\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\nimport { Timeline, Typography, Button, Spin } from \"antd\";\nimport QueueAnim from \"rc-queue-anim\";\n\nimport {\n  Task,\n  useGetTaskEventsQuery,\n  TaskStatus,\n  useMeQuery,\n  User,\n  TaskStatusHistoryEvent\n} from \"../../generated/graphql\";\nimport { TaskTag } from \"../task-tag/TaskTag\";\nimport { ArrowDownOutlined } from \"@ant-design/icons\";\n\nconst colorMap: { [key in TaskStatus]: string } = {\n  [TaskStatus.READY]: \"gray\",\n  [TaskStatus.IN_PROGRESS]: \"blue\",\n  [TaskStatus.DONE]: \"green\",\n  [TaskStatus.REJECTED]: \"red\"\n};\n\nconst { Text } = Typography;\n\nexport const TasksEventsTimeline: React.FC<{ task: Task }> = ({ task }) => {\n  const [showEvents, setShowEvents] = useState(5);\n  const { data, loading, error } = useGetTaskEventsQuery({\n    variables: { taskId: task.id }\n  });\n  const { data: meData } = useMeQuery({ fetchPolicy: \"cache-only\" });\n  const currentUserId = meData?.me.id || -1;\n\n  const events = data?.taskEvents || [];\n\n  const getCreatedRow = ({ user, createdAt }: TaskStatusHistoryEvent) => {\n    const username = user.id === currentUserId ? \"You\" : user.username;\n    const when = formatDistanceToNow(new Date(+createdAt));\n\n    return `${username}, ${when}`;\n  };\n\n  return (\n    <Spin tip=\"Loading...\" spinning={loading} delay={200}>\n      <QueueAnim\n        delay={200}\n        interval={20}\n        duration={250}\n        component={Timeline}\n        componentProps={{ gutter: 16 }}\n        forcedReplay\n      >\n        {events\n          .filter((_, index) => {\n            return index + 1 < showEvents;\n          })\n          .map((event, index) => {\n            return index === events.length - 1 ? (\n              <Timeline.Item color={colorMap[event.status]} key={event.id}>\n                <Text>Created</Text>\n                <br />\n                <Text type=\"secondary\">\n                  {getCreatedRow(event as TaskStatusHistoryEvent)}\n                </Text>\n              </Timeline.Item>\n            ) : (\n              <Timeline.Item color={colorMap[event.status]} key={event.id}>\n                <Text>\n                  Changed to{\" \"}\n                  <TaskTag\n                    taskId={event.taskId}\n                    status={event.status}\n                    clickable={false}\n                  />\n                </Text>\n                <br />\n                <Text type=\"secondary\">\n                  {getCreatedRow(event as TaskStatusHistoryEvent)}\n                </Text>\n              </Timeline.Item>\n            );\n          })}\n        {showEvents < events.length + 1 && (\n          <Timeline.Item dot={<ArrowDownOutlined />}>\n            <Button type=\"dashed\" onClick={() => setShowEvents(showEvents + 5)}>\n              Show more\n            </Button>\n          </Timeline.Item>\n        )}\n      </QueueAnim>\n    </Spin>\n  );\n};\n","import React, { useState } from \"react\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\nimport { Typography, Modal, Spin, Alert, Button, Row, Col, Space } from \"antd\";\nimport Meta from \"antd/lib/card/Meta\";\n\nimport {\n  Task,\n  useUpdateTaskDetailsMutation,\n  useMeQuery\n} from \"../../generated/graphql\";\nimport { TaskTag } from \"../task-tag/TaskTag\";\nimport { descriptionFallback } from \"../task-card/TaskCard\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ShareTaskTag } from \"../share-task-tag/ShareTaskTag\";\nimport { TasksEventsTimeline } from \"../tasks-events-timeline/TasksEventsTimeline\";\n\nconst { Paragraph, Title, Text } = Typography;\n\nexport const TaskModal: React.FC<{\n  task: Task;\n  visible: boolean;\n  onClose: () => void;\n}> = ({ task, visible, onClose }) => {\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newDescription, setNewDescription] = useState(\"\");\n  const { data: meData } = useMeQuery({ fetchPolicy: \"cache-only\" });\n  const currentUserId = meData?.me.id || -1;\n\n  const [\n    updateTaskDetailsMutation,\n    { loading, error }\n  ] = useUpdateTaskDetailsMutation();\n\n  const getAuthorName = () => {\n    return task.author?.id === currentUserId ? \"You, \" : task.author?.username;\n  };\n\n  const onCancel = () => {\n    if (newTitle || newDescription) {\n      Modal.confirm({\n        title: \"Confirm\",\n        centered: true,\n        icon: <ExclamationCircleOutlined />,\n        content:\n          \"You haven't saved the modified fields. Would you link to discard the changes?\",\n        okText: \"Discard\",\n        cancelText: \"Cancel\",\n        onOk: () => {\n          setNewTitle(\"\");\n          setNewDescription(\"\");\n          onClose();\n        }\n      });\n    } else {\n      onClose();\n    }\n  };\n\n  const onSave = async () => {\n    try {\n      await updateTaskDetailsMutation({\n        variables: {\n          taskDetails: {\n            taskId: task.id,\n            title: newTitle || task.title,\n            description: newDescription\n          }\n        }\n      });\n      setNewTitle(\"\");\n      setNewDescription(\"\");\n      onClose();\n    } catch {}\n  };\n\n  return (\n    <Modal\n      centered\n      width={700}\n      bodyStyle={{ maxHeight: \"80vh\", overflow: \"scroll\" }}\n      destroyOnClose\n      title={\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          }}\n        >\n          <Title level={4} style={{ margin: 0 }}>\n            <Paragraph\n              editable={{\n                onChange: newValue => {\n                  if (newValue) {\n                    setNewTitle(newValue);\n                  }\n                }\n              }}\n              style={{ margin: 0 }}\n            >\n              {newTitle || task.title}\n            </Paragraph>\n          </Title>\n          <TaskTag taskId={task.id} status={task.status} />\n        </div>\n      }\n      footer={[\n        <Text type=\"secondary\" style={{ float: \"left\", margin: \"5px\" }}>\n          Updated {formatDistanceToNow(new Date(+task.updatedAt))}\n        </Text>,\n        <Button key=\"cancel\" onClick={onCancel} disabled={loading}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"save\"\n          type=\"primary\"\n          disabled={loading || (!newDescription && !newTitle)}\n          onClick={onSave}\n        >\n          Save\n        </Button>\n      ]}\n      visible={visible}\n      onCancel={onCancel}\n      closable={false}\n    >\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error?.message}\n          type=\"error\"\n          showIcon\n          style={{ marginBottom: \"15px\" }}\n        />\n      )}\n      <Spin tip=\"Loading...\" spinning={loading} delay={100}>\n        <Row>\n          <Col span={14}>\n            <Meta\n              title=\"Author\"\n              description={\n                <>\n                  {getAuthorName()}\n                  <ShareTaskTag task={task} />\n                </>\n              }\n            />\n            <Space direction=\"vertical\" size={30}>\n              <Meta\n                title=\"Description\"\n                description={\n                  <div style={{ paddingLeft: \"15px\" }}>\n                    <Paragraph editable={{ onChange: setNewDescription }}>\n                      {newDescription ||\n                        task.description ||\n                        descriptionFallback}\n                    </Paragraph>\n                  </div>\n                }\n              />\n            </Space>\n          </Col>\n          <Col span={9} offset={1}>\n            <Meta\n              title=\"History\"\n              description={<TasksEventsTimeline task={task} />}\n            />\n          </Col>\n        </Row>\n      </Spin>\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\nimport formatDistanceToNow from \"date-fns/formatDistanceToNow\";\nimport { Card, Typography } from \"antd\";\nimport Meta from \"antd/lib/card/Meta\";\n\nimport { Task } from \"../../generated/graphql\";\nimport { TaskTag } from \"../task-tag/TaskTag\";\nimport { TaskModal } from \"../task-modal/TaskModal\";\n\nconst { Paragraph, Text } = Typography;\n\nexport const descriptionFallback = \"Description is missing\";\n\nexport const TaskCard: React.FC<{ task: Task }> = ({ task }) => {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <>\n      <Card\n        title={task.title}\n        hoverable\n        extra={<TaskTag taskId={task.id} status={task.status} />}\n        onClick={() => setModalVisible(true)}\n        actions={[\n          <Text\n            type=\"secondary\"\n            style={{ float: \"left\", padding: \"0 25px\", textAlign: \"right\" }}\n          >\n            Updated {formatDistanceToNow(new Date(+task.updatedAt))}\n          </Text>\n        ]}\n      >\n        <Meta\n          title=\"Description\"\n          description={\n            <Paragraph ellipsis={{ rows: 1, expandable: false }}>\n              {task.description || descriptionFallback}\n            </Paragraph>\n          }\n        />\n      </Card>\n      <TaskModal\n        task={task}\n        visible={modalVisible}\n        onClose={() => setModalVisible(false)}\n      />\n    </>\n  );\n};\n","import { gql } from \"apollo-boost\";\n\nexport const ME = gql`\n  query Me {\n    me{\n      id\n      username \n    }\n  }\n`;\n\nexport const TASKS = gql`\n  query GetTasks {\n    tasks {\n      id\n      title\n      description\n      createdAt\n      updatedAt\n      status\n      author {\n        id\n        username\n      }\n    }\n  }\n`\n\nconst PROFILES = gql`\n  query GetProfiles {\n    profiles {\n      id\n      username\n    }\n  }\n`\n\nconst SHARED_TASKS = gql`\n  query GetSharedTasks {\n    sharedTasks {\n      id\n      title\n      description\n      createdAt\n      updatedAt\n      status\n      author {\n        id\n        username\n      }\n    }\n  }\n`\n\nconst TASK_EVENTS = gql`\n  query GetTaskEvents($taskId: Int!) {\n    taskEvents(taskId: $taskId) {\n      id\n      createdAt\n      taskId\n      status\n      user {\n        id\n        username\n      }\n    }\n  }\n`","import React from \"react\";\nimport { Modal, Form, Input, Spin, Alert } from \"antd\";\nimport {\n  useCreateTaskMutation,\n  NewTaskInput,\n  GetTasksQuery\n} from \"../../generated/graphql\";\nimport { TASKS } from \"../../graphql/server/queries\";\n\nconst layout = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 16 }\n};\n\nexport const AddTaskModal: React.FC<{\n  visible: boolean;\n  onCancel: () => void;\n  onFinish: () => void;\n}> = ({ visible, onCancel, onFinish }) => {\n  const [form] = Form.useForm();\n  const [createTaskMutation, { loading, error }] = useCreateTaskMutation();\n\n  const onOk = async () => {\n    try {\n      const {\n        title,\n        description\n      } = (await form.validateFields()) as NewTaskInput;\n\n      await createTaskMutation({\n        variables: { newTaskData: { title, description } },\n        update: (store, { data }) => {\n          if (data?.addTask) {\n            const queryData = store.readQuery<GetTasksQuery>({ query: TASKS });\n            if (queryData?.tasks) {\n              const tasks = [data.addTask, ...queryData?.tasks];\n\n              store.writeQuery({ query: TASKS, data: { tasks } });\n            }\n          }\n        }\n      });\n\n      form.resetFields();\n      onFinish();\n    } catch {}\n  };\n\n  return (\n    <Modal\n      title=\"Add task\"\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n      okButtonProps={{ disabled: loading }}\n      cancelButtonProps={{ disabled: loading }}\n    >\n      {error && (\n        <Alert\n          message=\"Error\"\n          description={error.message}\n          type=\"error\"\n          showIcon\n        />\n      )}\n      <Spin tip=\"Loading...\" spinning={loading}>\n        <Form {...layout} form={form} onFinish={onFinish}>\n          <Form.Item\n            label=\"Task Title\"\n            name=\"title\"\n            rules={[{ required: true, message: \"Title is required!\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Task Description\" name=\"description\">\n            <Input.TextArea />\n          </Form.Item>\n        </Form>\n      </Spin>\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Col, Card } from \"antd\";\nimport { PlusCircleTwoTone } from \"@ant-design/icons\";\n\nimport \"./AddTaskCard.css\";\nimport Title from \"antd/lib/typography/Title\";\nimport { AddTaskModal } from \"../add-task-modal/AddTaskModal\";\n\nexport const AddTaskCard = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <>\n      <Card\n        className=\"add-task-container\"\n        onClick={() => setModalVisible(true)}\n      >\n        <PlusCircleTwoTone style={{ fontSize: \"35px\", color: \"#08c\" }} />\n        <Title level={4}>Add Task</Title>\n      </Card>\n      <AddTaskModal\n        visible={modalVisible}\n        onCancel={() => setModalVisible(false)}\n        onFinish={() => setModalVisible(false)}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Row, Col, Spin } from \"antd\";\nimport QueueAnim from \"rc-queue-anim\";\n\nimport { useGetTasksQuery, Task } from \"../../generated/graphql\";\nimport { TaskCard } from \"../task-card/TaskCard\";\nimport { AddTaskCard } from \"../add-task-card/AddTaskCard\";\n\nexport const Tasks = () => {\n  const { data, loading } = useGetTasksQuery();\n\n  const tasks: Task[] = (data?.tasks as Task[]) || [];\n\n  return (\n    <Spin tip=\"Loading...\" spinning={loading} delay={200}>\n      <QueueAnim\n        delay={300}\n        interval={30}\n        duration={300}\n        component={Row}\n        componentProps={{ gutter: 16 }}\n      >\n        <Col span={6} style={{ padding: \"10px\" }}>\n          <AddTaskCard />\n        </Col>\n        {tasks.map(task => (\n          <Col span={6} style={{ padding: \"10px\" }} key={task.id}>\n            <TaskCard task={task} />\n          </Col>\n        ))}\n      </QueueAnim>\n    </Spin>\n  );\n};\n","import React from \"react\";\n\nimport { withLayout } from \"../../components/layout/Layout\";\nimport { Tasks } from \"../../components/tasks/Tasks\";\n\nexport const DashboardPage = withLayout(() => {\n  return (\n    <Tasks />\n  );\n});\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useGetSessionQuery } from \"../../generated/graphql\";\n\nexport const LoggedOutOnlyRoute = ({ children, ...rest }: any) => {\n  const { data } = useGetSessionQuery();\n\n  if (data?.session) {\n    return <Redirect to={{ pathname: \"/\" }} />;\n  }\n\n  return <Route {...rest}>{children}</Route>;\n};\n","import React from \"react\";\nimport QueueAnim from \"rc-queue-anim\";\n\nimport { withLayout } from \"../../components/layout/Layout\";\nimport { useGetSharedTasksQuery, Task } from \"../../generated/graphql\";\nimport { Row, Col, Empty, Spin } from \"antd\";\nimport { TaskCard } from \"../../components/task-card/TaskCard\";\n\nexport const SharedTasksPage = withLayout(() => {\n  const { data, loading, error } = useGetSharedTasksQuery();\n  const tasks: Task[] = (data?.sharedTasks as Task[]) || [];\n\n  return (\n    <Spin tip=\"Loading...\" spinning={loading} delay={200}>\n      <QueueAnim\n        delay={300}\n        interval={30}\n        duration={300}\n        component={Row}\n        componentProps={{ gutter: 16 }}\n        // forcedReplay\n      >\n        {tasks.map(task => (\n          <Col span={6} style={{ padding: \"10px\" }} key={task.id}>\n            <TaskCard task={task} />\n          </Col>\n        ))}\n        {tasks.length === 0 && (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              width: \"100%\",\n              height: \"400px\"\n            }}\n          >\n            <Empty\n              imageStyle={{\n                height: 120\n              }}\n              description=\"There are no tasks shared with you yet.\"\n            />\n          </div>\n        )}\n      </QueueAnim>\n    </Spin>\n  );\n});\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport { AuthPage } from \"./pages/auth/AuthPage\";\nimport { ProtectedRoute } from \"./components/protected-route/ProtectedRoute\";\nimport { DashboardPage } from \"./pages/dashboard/DashboardPage\";\nimport { LoggedOutOnlyRoute } from \"./components/protected-route/LoggedOutOnlyRoute\";\nimport { SharedTasksPage } from \"./pages/shared-tasks/SharedTasksPage\";\n\nfunction App() {\n  return (\n    <Switch>\n      <LoggedOutOnlyRoute path=\"/auth\" exact>\n        <AuthPage />\n      </LoggedOutOnlyRoute>\n      <ProtectedRoute path=\"/\" exact>\n        <DashboardPage />\n      </ProtectedRoute>\n      <ProtectedRoute path=\"/shared-tasks\" exact>\n        <SharedTasksPage />\n      </ProtectedRoute>\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport { client } from \"./apollo/client\";\n\nimport App from \"./App\";\n\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}